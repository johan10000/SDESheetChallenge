/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        if(list1==NULL && list2==NULL)
            return list1;
        
        if(list1==NULL && list2!=NULL)
            return list2;
        
        if(list1!=NULL && list2==NULL)
            return list1;
        
        ListNode* head;
        
        if(list1->val<=list2->val)
        {
            head=list1;
        }
        
        else
        {
            head=list2;
            ListNode* temp=list1;
            list1=list2;
            list2=temp;
        }
        
        while(list1!=NULL && list2!=NULL)
        {
            while(list1!=NULL && list1->next!=NULL && list1->val==list1->next->val)
            {
                list1=list1->next;
            }
            
            if(list1!=NULL && list2!=NULL && list1->val<=list2->val && (list1->next==NULL || list2->val<=list1->next->val))
            {
                ListNode* t1=list1->next;
                ListNode* t2=list2->next;
                list1->next=list2;
                list2->next=t1;
                list1=list1->next;
                list2=t2;
            }
            
            else
            {
                list1=list1->next;
            }
        }
        
        return head;
    }
};
